<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Gmail contacts importer

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved
WWW: http://www.octazen.com
********************************************************************************/
if (!defined('__ABI')) die('Please include abi.php to use this importer!');

global $_OZ_SERVICES;
$_OZ_SERVICES['gmail'] = array('type'=>'abi', 'label'=>'GMail', 'class'=>'GMailImporter');

define('GMailImporter_AT_REGEX',"/<input\\s+type=\"hidden\"\\s+name=\"at\"\\s+value=\"([^\"]+)\"/ims");
define('GMailImporter_JSON_REGEX',"/var\\s+initContactData\\s*=\\s*({.*?);\\s*handleInitialContactData/ims");

/////////////////////////////////////////////////////////////////////////////////////////
//GMailImporter
/////////////////////////////////////////////////////////////////////////////////////////
//@api
class GMailImporter extends WebRequestor {

	var $appDomain;
	var $path;

	//@api
	function login ($loginemail, $password) {

		//If login email ends with ".yahoo" only, then we remove it
		$loginemail = preg_replace("/^(.*?)(\.gmail)$/ims", '${1}', $loginemail);

		$parts = $this->getEmailParts($loginemail);
	 	$login = $parts[0];
		$domain = strtolower($parts[1]);

		// ####
		if ("gmail.com"==$domain || "googlemail.com"==$domain) {
		 	$this->appDomain=null;
		 	$this->path='mail';
		} else {
			// It's a google apps domain.
			$this->appDomain = $domain;
			$this->path = 'a/'.$domain;
		}


		$location='';
		$form = new HttpForm;
		$form->addField("ltmpl", "default");
		$form->addField("ltmplcache", "2");
		$form->addField("hl", "en");
		$form->addField("service", "mail");
		$form->addField("Passwd", $password);
		$form->addField("rmShown", "1");
		$form->addField("null", "Sign in");
		$form->addField("_authtrkcde", "{#TRKCDE#}");

		if ($this->appDomain==null)
		{
			$form->addField("Email", $loginemail);
			$form->addField("continue", "http://mail.google.com/mail?");
			$postData = $form->buildPostData();
			$html = $this->httpPost("https://www.google.com/accounts/ServiceLoginAuth", $postData);
		}
		else
		{
			$form->addField("Email", $login);
			$form->addField("continue", 'https://mail.google.com/a/'.$this->appDomain.'/');
			$form->addField("rm", "false");
			$form->addField("asts", "");
			$postData = $form->buildPostData();
			$html = $this->httpPost("https://www.google.com/a/".$this->appDomain."/LoginAction2?service=mail", $postData);
		}
		
		
		if (strpos($html, 'Username and password do not match')!==false ||
			strpos($html, 'class="errormsg"')!==false || 
			strpos($this->lastUrl,'mail.google.com/a/')===FALSE) {
		 	$this->close();
			return abi_set_error(_ABI_AUTHENTICATION_FAILED,'Bad user name or password');
		}
		if (strpos($html, 'Server error')!==false) {
		 	$this->close();
			return abi_set_error(_ABI_UNSUPPORTED,'No Google Apps found for '.$domain);
		}
		

		if (defined('_ABI_ABCAPTCHA') && _ABI_CAPTCHA==1) {
			if (strpos($html, 'https://www.google.com/accounts/Captcha')!=false) {
			 	$this->close();
				return abi_set_error(_ABI_CAPTCHA_RAISED,'Captcha challenge was raised');
			}
		}

/*
		$location = oz_get_refresh_url($html);
		if ($location!=null) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find redirection page');
		}
*/

		/*			
        if (preg_match($this->REDIRECT_REGEX,$html,$matches)==0) {

		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find redirection page');
		}
		$location = htmlentities2utf8($matches[1]);
		*/
		

		//Gzip seems to be causing some problems with this section when used with GoDaddy proxy.
		//We temporarily disable gzip in this case.
		$supportGzip = $this->supportGzip;
		//Only if proxy is used
		if (oz_defined_config('curl_proxy')) $this->supportGzip = false;

		$location = oz_get_refresh_url($html);
		if ($location!=null) {
			$html = $this->httpGet($location);
		}
		
		//Reenable gzip if any
		$this->supportGzip = $supportGzip;

		//$url2 = $this->makeAbsolute($this->lastUrl, '/mail');
		$url2 = $this->makeAbsolute($this->lastUrl, '/'.$this->path);
		$at = null;
		$ats = $this->cookiejar->getCookieValues ($url2, "GMAIL_AT");
		if (!empty($ats) && count($ats)>0) {
			$at = $ats[0];
		}
		if (empty($at)) {
            //$html = $this->httpGet("http://mail.google.com/mail/?view=sec");
            $html = $this->httpGet("http://mail.google.com/$this->path/?view=sec");
	        if (preg_match(GMailImporter_AT_REGEX,$html,$matches)) {
				$at = htmlentities2utf8($matches[1]);
			}
		}

		if (empty($at)) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Failed to login. Unable to obtain GMAIL_AT.');
		}
		
		return abi_set_success()	 ;
	}

	function fetchCsv ($fmt='csv') {
		
//http://www.gmail.com/
//https://www.google.com/accounts/ServiceLogin?service=mail&passive=true&rm=false&continue=https%3A%2F%2Fmail.google.com%2Fmail%2F%3Fnsr%3D1%26ui%3Dhtml%26zy%3Dl&ltmpl=default&ltmplcache=2

/*	 	
	 	$html = $this->httpGet('https://www.google.com/accounts/ServiceLogin?service=mail&passive=true&rm=false&continue=http%3A%2F%2Fmail.google.com%2Fmail%2F&ltmpl=default&ltmplcache=2');
		$form = oz_extract_form_by_id($html, 'gaia_loginform');
        if (is_null($form)) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot find login form');
		}
		$form->setField("Email", $loginemail);
		$form->setField("Passwd", $password);
		$postData = $form->buildPostData();
		$html = $this->httpPost($form->action, $postData);
*/

		
		$limitToMyContacts = oz_get_config('gmail.limit_mycontacts',false);
		if ($fmt=='outlook') {
			//$html = $this->httpGet("http://mail.google.com/mail/contacts/data/export?exportType=ALL&groupToExport=&out=OUTLOOK_CSV");
			if ($limitToMyContacts) {
				$html = $this->httpGet("http://mail.google.com/$this->path/contacts/data/export?exportType=GROUP&groupToExport=%5EMine&out=OUTLOOK_CSV&lang=en&hl=en&l=en");
			}
			else {
				$html = $this->httpGet("http://mail.google.com/$this->path/contacts/data/export?exportType=ALL&groupToExport=%5EMine&out=OUTLOOK_CSV&lang=en&hl=en&l=en");
			}
		}
		else {
			//$html = $this->httpGet("http://mail.google.com/mail/contacts/data/export?exportType=ALL&groupToExport=&out=GMAIL_CSV");
			//$html = $this->httpGet("http://mail.google.com/$this->path/contacts/data/export?exportType=ALL&groupToExport=&out=GMAIL_CSV");
			
			if ($limitToMyContacts) {
				$html = $this->httpGet("http://mail.google.com/$this->path/contacts/data/export?exportType=GROUP&groupToExport=%5EMine&out=GMAIL_CSV&lang=en&hl=en&l=en");
			}
			else {
				$html = $this->httpGet("http://mail.google.com/$this->path/contacts/data/export?exportType=ALL&groupToExport=%5EMine&out=GMAIL_CSV&lang=en&hl=en&l=en");
			}

			
		}
		//$res = abi_extract_gmail_csv($html);
		return $html;

/*		
		$res = abi_extract_outlook_csv($html);
		if (!is_array($res)) {
		 	//Try the older CSV
			$form = new HttpForm;
			$form->addField("at", $at);
			$form->addField("ecf", "g");	//o for outlook
			$form->addField("ac", 'Export Contacts');
			$postData = $form->buildPostArray();
			$html = $this->httpPost("http://mail.google.com/mail/?ui=1&view=fec", $postData);
			$res = abi_extract_gmail_csv($html);
		}
		
	 	$this->close();
		return $res;
*/
	}	
	
	//@api
	function fetchContacts ($loginemail, $password) {

		$res = $this->login($loginemail,$password);
		if ($res!=_ABI_SUCCESS) return $res;

		//If login email ends with ".yahoo" only, then we remove it
		$loginemail = preg_replace("/^(.*?)(\.gmail)$/ims", '${1}', $loginemail);

		//$html = $this->fetchCsv($loginemail,$password,'outlook');
		$html = $this->fetchCsv('gmail');
		if ($this->lastStatusCode==200 && is_string($html)) {
			$res = abi_extract_gmail_csv($html);
			return $res;
		}

		//Else, problem. Try outlook version.		
		$html = $this->fetchCsv('outlook');
		if (!is_string($html)) {
			return $html;
		}
		$res = abi_extract_outlook_csv($html);
		return $res;
	}
		
	//@api
	function fetchContacts2 ($loginemail, $password) {
	
		$res = $this->login($loginemail,$password);
		if ($res!=_ABI_SUCCESS) return $res;
	
		return abcontactlist_to_olcontactlist($this->fetchAbContacts());

		/*	 
	 	//Note that Gmail doesn't export all fields in Outlook CSV form
		$html = $this->fetchCsv('outlook');
		if (!is_string($html)) {
			return $res;
		}
		$ce = new OzCsvExtractor;
		return $ce->extract($html);
		*/
	}


	
	//@api
	function fetchAbContacts() {

		//$html = file_get_contents('c:/tmp/trash/gmail.js')	 ;
		//$html = $this->httpGet('http://mail.google.com/mail/contacts/ui/ContactManager?js=RAW&maximize=true&hide=true&position=absolute&hl=en&emailsLink=true&sk=true&titleBar=false&border=NONE');
		$html = $this->httpGet("http://mail.google.com/$this->path/contacts/ui/ContactManager?js=RAW&maximize=true&hide=true&position=absolute&hl=en&emailsLink=true&sk=true&titleBar=false&border=NONE");

        if (preg_match(GMailImporter_JSON_REGEX,$html,$matches)==0) {
		 	$this->close();
			return abi_set_error(_ABI_FAILED,'Cannot parse JSON data');
        }
        $html = $matches[1];
		
		$json = oz_json_decode($html,false);

/*
		if (!is_array($json)) return abi_set_error(_ABI_FAILED,'Cannot parse JSON data');
		if (!isset($json['Body'])) return abi_set_error(_ABI_FAILED,'Cannot parse JSON data.');
		$node =& $json['Body'];
		if (!isset($node['Contacts'])) return abi_set_error(_ABI_FAILED,'Cannot find contacts');
		$contacts =& $node['Contacts'];
*/

		$al = array();
		$contacts = @$json->Body->Contacts;
		if (is_array($contacts)) {
			foreach ($contacts as $c) {
			 	$abc = new AbContact;

				//Addresses			 	
			 	$list = @$c->Addresses;
			 	if (is_array($list)) {
					foreach ($list as $item) {
						$type = @$item->Type->Id;
						$addr = @$item->Unstructured;
						switch ($type) {
							case 'HOME': $type=ADDRESS_HOME; break;
							case 'WORK': $type=ADDRESS_WORK; break;
							case 'OTHER': $type=ADDRESS_OTHER; break;
						}
						$obj = new AbContactAddress;
						$obj->type = $type;
						$obj->street1 = $addr;
						$abc->addresses[] = $obj;
					}
				}
			 	
				$v = @$c->Company;	if ($v!=null) $abc->company=$v;
				$v = @$c->DisplayName;	if ($v!=null) $abc->displayName=$v;
				//$v = @$c->FullName;	if ($v!=null) $abc->firstName=$v;	//!
				$v = @$c->Name;	if ($v!=null) $abc->firstName=$v;	//!
				
				

				//Emails				
			 	$list = @$c->Emails;
			 	if (is_array($list)) {
					foreach ($list as $item) {
						$type = @$item->Type->Id;
						$value = @$item->Address;
						switch ($type) {
							case 'HOME': $type=EMAIL_HOME; break;
							case 'WORK': $type=EMAIL_WORK; break;
							case 'OTHER': $type=EMAIL_OTHER; break;
						}
						$abc->emails[] = new AbContactEmail($type,$value,null);
					}
				}
				
				//IMs				
			 	$list = @$c->Ims;
			 	if (is_array($list)) {
					foreach ($list as $item) {
						$service = @$item->Service->Id;
						$value = @$item->Name;
						//$type = @$item->Type->Id;
						switch ($service) {
							case 'GTALK': $service=IM_GTALK; break;
							case 'YAHOO': $service=IM_YAHOO; break;
							case 'MSN': $service=IM_MSN; break;
							case 'JABBER': $service=IM_JABBER; break;
							case 'AIM': $service=IM_AIM; break;
							case 'ICQ': $service=IM_ICQ; break;
						}
						$abc->instantMessengers[] = new AbContactInstantMessenger($service,$value,null);
					}
				}

				$v = @$c->Notes;	if ($v!=null) $abc->notes=$v;
				
				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				//There's also an "Others" member, which holds an array of other thing such as work department, etc office location, etc
				//We're not importing these for now...
				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				
				//Phones
			 	$list = @$c->Phones;
			 	if (is_array($list)) {
					foreach ($list as $item) {
						$type = @$item->Type->Id;
						$value = @$item->Number;
						switch ($type) {
							case 'HOME_FAX': $type=EMAIL_HOMEFAX; break;
							case 'PAGER': $type=PHONE_PAGER; break;
							case 'HOME': $type=PHONE_HOME; break;
							case 'MOBILE': $type=PHONE_MOBILE; break;
							case 'WORK_FAX': $type=PHONE_WORKFAX; break;
							case 'WORK': $type=PHONE_WORK; break;
							case 'OTHER': $type=PHONE_OTHER; break;
						}
						$abc->phones[] = new AbContactPhone($type,$value);
					}
				}
								

				//?
				$v = @$c->Title;	if ($v!=null) $abc->jobTitle=$v;
				
				$al[] = $abc;
			}
			
		}
		
		return $al;
		
/*		
	 	//Note that Gmail doesn't export all fields in Outlook CSV form
		$html = $this->fetchCsv('outlook');
		if (!is_string($html)) {
			return $res;
		}
		$ce = new OzCsvExtractor;
		return olcontactlist_to_abcontactlist($ce->extract($html));
*/		
	}

}

// Gmail
global $_DOMAIN_IMPORTERS;
$_DOMAIN_IMPORTERS["gmail"]='GMailImporter';
$_DOMAIN_IMPORTERS["gmail.com"]='GMailImporter';
$_DOMAIN_IMPORTERS["googlemail.com"]='GMailImporter';
$_DOMAIN_IMPORTERS["data.bg"]='GMailImporter';
$_DOMAIN_IMPORTERS["mailbox.hu"]='GMailImporter';

?>
