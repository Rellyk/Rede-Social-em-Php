<?php
/********************************************************************************
DO NOT EDIT THIS FILE!

Unified Inviter Component

You may not reprint or redistribute this code without permission from Octazen Solutions.

Copyright 2009 Octazen Solutions. All Rights Reserved.
WWW: http://www.octazen.com
********************************************************************************/
if (!defined('__ABI')) die('Please include abi.php to use this inviter component!');

define('_OZ_INVITER',1);

function ozi_include ($file) {if (file_exists($file)) include($file);}

global $_OZINVITER_CALLBACKS;
$_OZINVITER_CALLBACKS = array(
	'get_invite_message' => 'oz_get_invite_message',
	'send_emails' => 'oz_send_emails',
	'filter_contacts' => 'oz_filter_contacts',
	'get_form_snippet' => 'oz_get_form_snippet'	
);


function ozi_get_config($key,$default=NULL) {global $_OZ_CONFIG;return isset($_OZ_CONFIG[$key]) ? $_OZ_CONFIG[$key] : $default;}
function ozi_set_config($key,$value) {global $_OZ_CONFIG;return $_OZ_CONFIG[$key]=$value;}


include(dirname(__FILE__).'/ozinviter_lang.php');
include(dirname(__FILE__).'/ozinviter_config.php');
ozi_include(dirname(__FILE__).'/settings/config.php');
//include(dirname(__FILE__).'/settings/config.php');


define('_OZ_STATE_INITIAL',0);
define('_OZ_STATE_LOGGING_IN',1);
define('_OZ_STATE_FETCHING_CONTACTS',2);
define('_OZ_STATE_SELECT_CONTACTS',3);
define('_OZ_STATE_SENDING_INVITES',4);
define('_OZ_STATE_FINISHED',5);



class OzState
{
	var $inviter;	//The inviter object instance
	var $contacts;	//??? UNUSED?
	var $state;
	var $view;	//Current view
	//var $selected_contacts;
	function OzState() {$this->reset();}
	function reset () {$this->state=_OZ_STATE_INITIAL;$this->inviter=new OzInviter;$this->contacts=NULL;$this->view='selector';}
	function save_contacts ($contacts) {
		$this->contacts = $contacts;
		//$this->selected_contacts = array();
		//foreach ($contacts as $c) {$this->selected_contacts[$c['id']]=$c;}
	}
}

//function oz_save_state($obj) {return base64_encode(gzcompress(serialize($obj)));}
//function oz_load_state($state) {return empty($state)?NULL:unserialize(gzuncompress(base64_decode($state)));}

function oz_get_temp_dir() {
	if (function_exists('sys_get_temp_dir')) 
		$dir = sys_get_temp_dir();
	else {
		$tf = tempnam('','ozs_');
		unlink($tf);
		$dir = dirname($tf);
	}
	//Add '/' path separator if there isn't one
	$n = strlen($dir);
	$c = $dir[$n-1];
	if ($c!=='/' && $c!=='\\') $dir.='/';
	return $dir;
}
function oz_generate_state_filename() {return md5(uniqid(rand(), true));}

function oz_delete_state ($state_file) {
	if (empty($state_file)) return NULL;
	$s = str_replace(array('.','/','\\'),'',$state_file); //Safe name
	$filename = oz_get_temp_dir().'ozstate/'.$s;
	@unlink($filename);
}

function oz_save_state($state_file,$obj) {
	$dir = oz_get_temp_dir().'ozstate';
	@mkdir($dir);
	$s = str_replace(array('.','/','\\'),'',$state_file); //Safe name
	$filename = $dir.'/'.$s;
	$f = fopen($filename,'w');
	if ($f!==FALSE)
	{
		$data = serialize($obj);
		fwrite($f,$data,strlen($data));
		fclose($f);
	}

	//Housekeep old entries 1/10 of the time
	mt_srand(time());
	$r = rand(0,10);
	if ($r===1)
	{
		//Look for files in captcha folder. Delete anything older than 30 minutes old.
		$oldest = time()-(30*60);
		if ($handle = opendir($dir)) {
			while (false !== ($file = readdir($handle))) {
				if ($file!='.' && $file!='..')
				{
					$file = $dir.'/'.$file;
					$c = filemtime($file);
					if ($c<$oldest) {
						unlink($file);
					}
				}
			}
			closedir($handle);
		}
	}
}

function oz_load_state($state_file) {
	if (empty($state_file)) return NULL;
	$s = str_replace(array('.','/','\\'),'',$state_file); //Safe name
	$filename = oz_get_temp_dir().'ozstate/'.$s;
	$data = @file_get_contents($filename);
	if ($data===FALSE) return NULL;
	$obj = unserialize($data);
	return $obj;
}

function oz_dabi_valid_email($email) {
	if (!preg_match("/^([+=&'\/\\?\\^\\~a-zA-Z0-9\._-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-]+)+/", $email)) return false;
	return true;
}

function ozi_reduce_whitespace ($str) {
	$sb = '';
	$lastIsWhitespace = true;
	$n = strlen($str);
	for ($i=0; $i<$n; $i++) {
		$c = $str[$i];
		if ($c==' ' || $c=="\t" || $c=="\r" || $c=="\n") {
			if ($lastIsWhitespace==true) continue;
			$lastIsWhitespace = true;
		}
		else {
			$lastIsWhitespace = false;
		}
		$sb.=$c;
	}
	return trim($sb);
}



function oz_dabi_extract_contacts ($data) {
	$res = array();
	$lines = explode("\r\n",$data);
	$emails = array();
	foreach ($lines as $line) {
		$c = array();
		$pc = 0;
		$line = trim($line);
		$parts = explode('&',$line);
		foreach ($parts as $part) {
			$va = explode('=',$part,2);
			if (count($va)==2) {
				$key = $va[0];
				$value = urldecode($va[1]);
				$c[$key]=$value;
				$pc++;
			}
		}
		if ($pc>0) {
			//Get name
			//$name = isset($c['DisplayName'])?$c['DisplayName']:'';
			$name = isset($c['DisplayName']) ? $c['DisplayName'] : (isset($c['Name']) ? $c['Name'] : '');
			if (empty($name)) {
				$fname = isset($c['FirstName'])?$c['FirstName']:'';
				$mname = isset($c['MiddleName'])?$c['MiddleName']:'';
				$lname = isset($c['LastName'])?$c['LastName']:'';
				if (!empty($fname) || !empty($mname) || !empty($lname)) {
					$name = ozi_reduce_whitespace($fname.' '.$mname.' '.$lname);
				}
			}
			//Get email addresses and add as individual contacts
			$email = isset($c['Email']) ? strtolower($c['Email']) : '';
			if (!empty($email) && oz_dabi_valid_email($email) && !isset($emails[$email])) {$res[]=array('name'=>$name,'email'=>$email,'id'=>$email);$emails[$email]=true;}
			$email = isset($c['Email2']) ? strtolower($c['Email2']) : '';
			if (!empty($email) && oz_dabi_valid_email($email) && !isset($emails[$email])) {$res[]=array('name'=>$name,'email'=>$email,'id'=>$email);$emails[$email]=true;}
			$email = isset($c['Email3']) ? strtolower($c['Email3']) : '';
			if (!empty($email) && oz_dabi_valid_email($email) && !isset($emails[$email])) {$res[]=array('name'=>$name,'email'=>$email,'id'=>$email);$emails[$email]=true;}
		}
	}
	return $res;
	
}

function oz_dabi_decrypt($key, $pt) {
	$s = array();
	for ($i=0; $i<256; $i++) $s[$i] = $i;
	$j = 0;
	$x;
	for ($i=0; $i<256; $i++) {
		$j = ($j + $s[$i] + ord($key[$i % strlen($key)])) & 0xFF; //% 256;
		$x = $s[$i];
		$s[$i] = $s[$j];
		$s[$j] = $x;
	}
	$i = 0;
	$j = 0;
	$ct = '';
	$y;
	for ($y=0; $y<strlen($pt); $y++) {
		$i = ($i + 1) & 0xFF; //% 256;
		$j = ($j + $s[$i]) & 0xFF; //% 256;
		$x = $s[$i];
		$s[$i] = $s[$j];
		$s[$j] = $x;
		$ct .= $pt[$y] ^ chr($s[($s[$i] + $s[$j]) &0xFF]);
	}
	return $ct;
}

function ozi_unmagic(&$r) {
	if (!get_magic_quotes_gpc() || !is_string($r)) return $r;
	if (!isset($_REQUEST['oz_mq']) || ord($_REQUEST['oz_mq'])===92) return stripslashes($r);
	return $r;
}

function ozi_get_param($key,$defaultValue=NULL) {
	if (!isset($_REQUEST[$key])) return $defaultValue;
	return ozi_unmagic($_REQUEST[$key]);
}
//function ozi_get_param($key,$defaultValue=NULL) {return isset($_REQUEST[$key]) ? $_REQUEST[$key] : $defaultValue;}


function ozi_parse_url ($url) {
    $r  = '!(?:(\w+)://)?(?:(\w+)\:(\w+)@)?([^/:?#]+)?(?:\:(\d*))?([^#?]+)?(?:\?([^#]+))?(?:#(.+$))?!i';
    if (preg_match ( $r, $url, $out )==0) return FALSE;
    $res = array();
    if (!empty($out[1])) $res['scheme'] = $out[1];
    if (!empty($out[2])) $res['user'] = $out[2];
    if (!empty($out[3])) $res['pass'] = $out[3];
    if (!empty($out[4])) $res['host'] = $out[4];
    if (!empty($out[5])) $res['port'] = $out[5];
    if (!empty($out[6])) $res['path'] = $out[6];
    if (!empty($out[7])) $res['query'] = $out[7];
    if (!empty($out[8])) $res['fragment'] = $out[8];
    return $res;
}

function oz_get_current_url ()
{
	//$name = $_SERVER['SERVER_NAME'];
	//Windows Live Login cannot accept "localhost", but accepts "127.0.0.1"
	//echo "NAME=$name";
	//if ($name=='localhost') $name='127.0.0.1';
	//return 'http://'.$name.$_SERVER['REQUEST_URI'];
	//return 'http://'.$name.':'.$_SERVER['SERVER_PORT'].$_SERVER['REQUEST_URI'];
	return 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
}

function ozi_make_absolute_url($absolute, $relative) 
{
	//If relative is an absolute path, return it
	if (empty($relative)) $relative=$absolute;
    $p = ozi_parse_url($relative);
    
    if(isset($p["scheme"])) return $relative;
    $path = isset($p["path"]) ? $p["path"] : "";
    $path = dirname($path);
    extract(ozi_parse_url($absolute));
    if($relative{0} == '/') {
        $cparts = explode("/", $relative);
    }
    else {
        $aparts = explode("/", $path);
    	if (count($aparts)>0) array_pop($aparts);
        $rparts = explode("/", $relative);
        $cparts = array_merge($aparts, $rparts);
        foreach($cparts as $i => $part) {
            if($part == '.') $cparts[$i] = null;
            if($part == '..') {$cparts[$i - 1] = null;$cparts[$i] = null;}
        }
    }
	
	//Filter cparts, removing empty elements
	$res = array();
	foreach ($cparts as $v) if (strlen($v)>0) $res[] = $v;
	$cparts = $res;

	//##+kenfoo 14042007. Added proper handling of paths ending with a slash.
	//Earlier code dropped the final slash, causing problems with Facebook /inbox/.
    $n = strlen($relative);
    if ($n>0 && $relative[$n-1]=='/') $cparts[]='';
    
    $path = implode("/", $cparts);
    $url = "";
    if(isset($scheme)) $url = "$scheme://";
    if(isset($user)) {
        $url .= "$user";
        if($pass) $url .= ":$pass";
        $url .= "@";
    }
    if(isset($host)) {
		$url .= $host;
	    if(isset($port)) $url .= ":$port";
		$url .='/';
	}
    $url .= $path;
    return $url;

}

function ozi_render_form_snippet() {
	global $_OZINVITER_CALLBACKS;
	$func = $_OZINVITER_CALLBACKS['get_form_snippet'];
	$html = function_exists($func) ? $func() : '';
	//For magic quote test
	$html.='<input type="hidden" name="oz_mq" value="\'"/>';
	return $html;
}

//--------------------------------------------------
//Lookup text string 
//--------------------------------------------------
function oz_text($key) {
	global $_OZINVITER_LANG;
	return isset($_OZINVITER_LANG[$key]) ? $_OZINVITER_LANG[$key] : $key;
}

//--------------------------------------------------
//Compile and evaluate view
//--------------------------------------------------
function oz_eval_template ($templatefile) {
	//Check if template already present in file system and that it's up to date.
	//If it is, then reuse it using include.
	$src = file_get_contents($templatefile);
	$php = '';
	$i = 0;
	$n = strlen($src);
	while ($i<$n) {
		$i2 = strpos($src,'{{',$i);
		if ($i2===FALSE) {$php .= substr($src,$i,$n-$i);break;}
		$i3 = strpos($src,'}}',$i2+2);
		if ($i3===FALSE) {$php .= substr($src,$i,$n-$i);break;}
		if ($i2>$i) $php.=substr($src,$i,$i2-$i);
		$key = substr($src,$i2+2,$i3-$i2-2);
		$php.='<?php echo oz_text(\''.$key.'\'); ?>';
		$i = $i3+2;
	}
	return eval(" \r\n?>".$php."<?php \r\n");
}

//--------------------------------------------------
//Send invitation either through the social network's private messaging,
//or through email (calls oz_send_email()).
//
//Allows for personalization of messages.
//
//$ozinviter - OzInviter instance
//$contacts  - Array of contacts, where each contact is an associative array containing name,email,id,uid fields.
//				Required Keys: id, email (for email contacts), uid (for social network contacts)
//
//This function rarely needs to be modified.
//--------------------------------------------------
function oz_send_invitation (&$ozinviter, &$contacts, $personal_message=NULL)
{
	$from_name = ozi_get_param('oz_from_name',NULL);
	$from_email = ozi_get_param('oz_from_email',NULL);

	//Build the message
	global $_OZINVITER_CALLBACKS;
	$func = $_OZINVITER_CALLBACKS['get_invite_message']	;
	$msg = $func($from_name,$from_email,$personal_message);
	$subject = $msg['subject'];
	$text_body = $msg['text_body'];
	$html_body = $msg['html_body'];
	if (ozi_get_config('allow_personal_message',TRUE))
	{
		$text_body = str_replace('{PERSONALMESSAGE}',$personal_message==NULL?'':$personal_message,$text_body);
		$html_body = str_replace('{PERSONALMESSAGE}',$personal_message==NULL?'':htmlentities($personal_message,ENT_COMPAT,'UTF-8'),$html_body);
	}

	//If inviter isn't a social network, then it can only import and not send emails.
	$res = is_null($ozinviter) ? OZE_UNSUPPORTED_OPERATION : $ozinviter->send_messages($contacts,$subject,$text_body);
	if ($res===OZE_UNSUPPORTED_OPERATION)
	{
		$recplist = array();

		//----------------------------------------------------------------	
		//Send invitation by email.
		$cl = array();
		$n = count($contacts);
		for ($i=0; $i<$n; $i++) {
			$c = &$contacts[$i];
			if (!is_array($c)) $c2=array('type'=>'email','id'=>$c,'email'=>$c);
			else $c2 = $c;
			$email = $c2['email'];
			//$email = is_array($r) ? (isset($r['email']) ? $r['email'] : '') : $r;
			if (!empty($email) && abi_valid_email($email)) 
			{
				$cl[]=$c2;
				$recplist[] = $email;
			}
		}
		global $_OZINVITER_CALLBACKS;
		$func = $_OZINVITER_CALLBACKS['send_emails'];
		$func($from_name,$from_email,$cl,$personal_message);
		//oz_send_emails($cl,$subject,$text_body,$html_body);
		//----------------------------------------------------------------	

		//Store recipients list to be presented in output		
		$_REQUEST['oz_recipients'] = $recplist;
		$res = OZE_SUCCESS;
	}
	//Other errors include OZE_CAPTCHA, etc
	
	return $res;
}

//--------------------------------------------------
//Get relative/absolute path to the resource (res) folder,  terminated by '/'
//--------------------------------------------------
function oz_get_resource_path ()
{
	//Defaults to "./res/" URI path relative to the current url.
	//This may be changed to point to some other folders in case Apache mod_rewrite or
	//SEO friendly urls are used and the "./res/" path doesn't point to correct location.
	return $_REQUEST['oz_res_uri'];
}

function oz_get_privacy_policy_path() 
{
	return oz_get_resource_path().'privacy.html';
}

function oz_is_greeting_view()
{
	return !isset($_POST['oz_state']);
}

//--------------------------------------------------
//Render the inviter and returns the generated HTML
//--------------------------------------------------
function oz_render_inviter($resuri='./res/',$resdir=NULL)
{
	ob_start();

	//Save resource path
	$n = strlen($resuri);
	$c = $resuri[$n-1];
	if ($c!=='/' && $c!=='\\') $resuri.='/';
	$_REQUEST['oz_res_uri'] = $resuri;
	if ($resdir===NULL) $resdir = dirname(__FILE__).'/res/';
	$_REQUEST['oz_res_dir'] = $resdir;

	$_OZ_VIEWS = array(
		'selector'=>dirname(__FILE__).'/views/view_selector.php',
		'captcha'=>dirname(__FILE__).'/views/view_captcha.php',
		'contacts'=>dirname(__FILE__).'/views/view_contacts.php',
		'finished'=>dirname(__FILE__).'/views/view_finished.php'
	);

	//===================================================================================
	//User first time browsing to this page
	//===================================================================================
	if (!isset($_POST['oz_state']))
	{
		$_REQUEST['oz_state'] = oz_generate_state_filename();
		$state=new OzState;
		$oz_view = 'selector';
	}
	else
	{
	/*
	echo "[REQUEST]<hr/>";
	echo '<pre>';
	echo htmlentities(var_export($_REQUEST,true));
	echo '</pre>';
	echo "[STATE]<hr/>";
	echo '<pre>';
	echo htmlentities(var_export($state,true));
	echo '</pre>';
	echo '<hr/>';
	*/
		
		
	
		$res = OZE_SUCCESS;
		
		//Load state. Create one if no state as yet.
		$state = oz_load_state($_REQUEST['oz_state']);
		if ($state===NULL) {$_REQUEST['oz_state'] = oz_generate_state_filename();$state=new OzState;}	
		$oz_view = $state->view;
		if (empty($oz_view)) $oz_view='selector';
	
	
		//===================================================================================
		//User selected webmail/social network service
		//===================================================================================
		/*
		if (isset($_REQUEST['ozbtn_select']))
		{
			$svcid = $_REQUEST['oz_service'];
			if (strpos($svcid,'file')===0)
			{
				if ($svcid=='file_oecsv') $_REQUEST['oz_file_format']='oecsv';
				else if ($svcid=='file_wmcsv') $_REQUEST['oz_file_format']='wmcsv';
				else if ($svcid=='file_tbldif') $_REQUEST['oz_file_format']='tbldif';
				//if ($svcid=='file' || $svcid=='file_olcsv') $_REQUEST['oz_file_format']='olcsv';
				else $_REQUEST['oz_file_format']='olcsv';
				$oz_view = 'upload';
				$res = OZE_SUCCESS;
			}
			else if ($svcid=='manual')
			{
				$oz_view = 'manual';
				$res = OZE_SUCCESS;
			}
			else if ($svcid=='bookmark')
			{
				$oz_view = 'bookmark';
				$res = OZE_SUCCESS;
			}
			else if (strpos($svcid,'is_')===0)
			{
				$oz_view = 'login';
				$res = OZE_SUCCESS;
			}
			else 
			{
				$oz_view = 'login';
				$res = OZE_SUCCESS;
			}
		}
		*/
	
		//===================================================================================
		//Login action
		//===================================================================================
		else if (isset($_REQUEST['ozbtn_login']) || isset($_REQUEST['oz_authstr']))
		{
			//Create the inviter and attempt login
			$svcid = $_REQUEST['oz_service'];
			$login = ozi_get_param('oz_auth_login','');
			$password = ozi_get_param('oz_auth_password','');
			$authstr = ozi_get_param('oz_authstr','');
			
			if ((empty($login) || empty($password)) && empty($authstr))
			{
				$res = OZE_AUTHENTICATION_FAILED;
			}
			else
			{
				//It's best we reset the state and create a new OzInviter instance in case 
				//user hits reload, causing the login sequence to fail (since user already logged in)
				$state->reset();
				if (!empty($authstr)) {
					$res = $state->inviter->auth($authstr,$svcid);
				}
				else $res = $state->inviter->login($login,$password,$svcid);
				$state->state = _OZ_STATE_LOGGING_IN;
				if ($res==OZE_SUCCESS)
				{
					//Login successful. Try fetching contacts now. 
					$state->state = _OZ_STATE_FETCHING_CONTACTS;
					$res = $state->inviter->fetch_contacts();
					
					//Switch to contacts list view if successful.
					if (is_array($res))
					{
						$state->state = _OZ_STATE_SELECT_CONTACTS;
		
						//Store contacts list in request				
						$state->save_contacts($res);
						//$_REQUEST['oz_contacts'] = $res;
						$res = OZE_SUCCESS;
						$oz_view = 'contacts';	//_file = dirname(__FILE__).'/view_contacts.php';
					}
				}
			}
			
		}
	
		//===================================================================================
		//Answer captcha action
		//===================================================================================
		else if (isset($_REQUEST['ozbtn_captcha']))
		{
			if ($state->inviter==NULL)
			{
				$res = OZE_SUCCESS;
				$view = 'selector';	//Go back to login page if we're done
			}
			else
			{
				$answer = ozi_get_param('oz_captcha_answer');
				$res = $state->inviter->answer_captcha($answer);
				if ($res==OZE_SUCCESS || is_array($res))
				{
					//Captcha for login phase successful. Try fetching contacts.
					if ($state->state == _OZ_STATE_LOGGING_IN)
					{
						//Login successful. Try fetching contacts now. 
						$state->state = _OZ_STATE_FETCHING_CONTACTS;
						$res = $state->inviter->fetch_contacts();
						//Switch to contacts list view if successful.
						if (is_array($res))
						{
							$state->state = _OZ_STATE_SELECT_CONTACTS;
			
							//Store contacts list in request				
							$state->save_contacts($res);
							//$_REQUEST['oz_contacts'] = $res;
							$res = OZE_SUCCESS;
							$oz_view = 'contacts';
						}
					}
					//Captcha for fetch contacts successful. Next step is to select friends.
					else if ($state->state==_OZ_STATE_FETCHING_CONTACTS)
					{
						$state->state = _OZ_STATE_SELECT_CONTACTS;
						$state->save_contacts($res);
						//assert $res must be an array of contacts!
						//$_REQUEST['oz_contacts'] = $res;
						$res = OZE_SUCCESS;
						$oz_view = 'contacts';
					}
					//Captcha for send invites successful.
					else if ($state->state==_OZ_STATE_SENDING_INVITES)
					{
						$state->state = _OZ_STATE_FINISHED;
						$oz_view = 'finished';
					}
					else
					{
						//??
					}
					//Just to be safe...
					if (is_array($res)) $res=OZE_SUCCESS;
				}
			
			}
		}
	
		//===================================================================================
		//Cancel a captcha challenge
		//===================================================================================
		else if (isset($_REQUEST['ozbtn_cancel_captcha']))
		{
			//If captcha is caused by sending contacts, then cancellation causes
			//user to go back to contacts list
			if ($state->state==_OZ_STATE_SENDING_INVITES)
			{
				$state->state = _OZ_STATE_SELECT_CONTACTS;
				$_REQUEST['oz_contacts'] = $state->contacts;
				$res = OZE_SUCCESS;
				$oz_view = 'contacts';
			}
			//In all other cases, go back to starting screen
			else
			{
				$state->reset();
				$oz_view = 'selector';
				$res = OZE_SUCCESS;
			}
		}
	
		//===================================================================================
		//Send invites to selected contacts
		//===================================================================================
		else if (isset($_REQUEST['ozbtn_contacts']))
		{
			if (isset($_REQUEST['oz_cid']))
			{
				$state->state = _OZ_STATE_SENDING_INVITES;
				$cids = $_REQUEST['oz_cid'];
				$msg = ozi_get_param('oz_message',NULL);
				
				//Translate contact IDs to contacts
				$cmap = array();
				$contacts = array();
				if ($state->contacts!=NULL) foreach ($state->contacts as $c) $cmap[$c['id']]=$c;
				foreach ($cids as $cid) if (isset($cmap[$cid]))	$contacts[] = $cmap[$cid];
				$res = oz_send_invitation($state->inviter,$contacts,$msg);
	/*			
				$res = oz_send_invitation($state->inviter,$cids);
				
				$msg = oz_get_invite_message();
				$subject = $msg['subject'];
				$text_body = $msg['message'];
				$res = $state->inviter->send_messages($cids,$subject,$text_body);
	*/			
				if ($res===OZE_SUCCESS)
				{
					$state->state = _OZ_STATE_FINISHED;
					$oz_view = 'finished';
				}
			}
		}
		
		//===================================================================================
		//Manually send invites
		//===================================================================================
		else if (isset($_REQUEST['ozbtn_manual']))
		{
			$state->state = _OZ_STATE_SENDING_INVITES;
			$cids = $_REQUEST['oz_cid'];
			$msg = ozi_get_param('oz_message',NULL);
			$inviter = NULL;
			$contacts = array();
			foreach ($cids as $cid) $contacts[]=array('id'=>$cid,'email'=>$cid);
			$res = oz_send_invitation($inviter,$contacts,$msg);
			if ($res===OZE_SUCCESS)
			{
				$state->state = _OZ_STATE_FINISHED;
				$oz_view = 'finished';
			}
		}
	
		//===================================================================================
		//Upload CSV/LDIF file
		//===================================================================================
		else if (isset($_REQUEST['ozbtn_upload']))
		{
			if (is_uploaded_file($_FILES['oz_file']['tmp_name'])) 
			{
				$filename = $_FILES['oz_file']['tmp_name'];
				if (file_exists($filename)) 
				{
					//TODO: What character set encoding is the file?
					$data = file_get_contents($filename);
					if (!empty($data)) {
						$inviter = new OzInviter;
						$state->inviter = $inviter;
					
						//Parse the CSV file
						$format = $_REQUEST['oz_file_format'];
						$res = $state->inviter->parse_contacts_file($data,$format);
						/*
						if ($format=="file_olcsv") $res = $state->inviter->parse_contacts_file($data,'olcsv');
						else if ($format=="file_oecsv") $res = $state->inviter->parse_contacts_file($data,'oecsv');
						else if ($format=="file_wmcsv") $res = $state->inviter->parse_contacts_file($data,'oecsv');
						else if ($format=="file_tbldif") $res = $state->inviter->parse_contacts_file($data,'tbldif');
						else $res = OZE_UNSUPPORTED;
						*/
						
						//Switch to contacts list view if successful.
						if (is_array($res))
						{
							$state->state = _OZ_STATE_SELECT_CONTACTS;
							$state->save_contacts($res);
							//Store contacts list in request				
							//$_REQUEST['oz_contacts'] = $res;
							$res = OZE_SUCCESS;
							$oz_view = 'contacts';	//_file = dirname(__FILE__).'/view_contacts.php';
						}
					}
					unlink($filename);
				}
			}
		}
			
		//===================================================================================
		//ActiveX/Desktop Contacts Importer
		//===================================================================================
		else if (isset($_REQUEST['oz_dabi_result']))
		{
			//Extract desktop contacts importer result and decode
			$data = $_REQUEST['oz_dabi_result'];
			$i1 = strpos($data,'-----BEGIN CONTACTS-----');
			$i2 = strpos($data,'-----END CONTACTS-----');
			if ($i1===FALSE || $i2===FALSE || $i1>$i2) 
			{
				//Error! Bad data
				$res = OZE_INVALID_FILE_FORMAT;
			}
			else 
			{
				//$data = $matches[1];
				$i1 += 24; //Skip the header
				$data = trim(substr($data,$i1,$i2-$i1));
			
				//Base64-decode
				$data = base64_decode($data);
			
				//Decrypt with key
				$ckey = base64_decode(ozi_get_config('desktopimporter_decrypt_key',''));
				$data = oz_dabi_decrypt($ckey,$data);
			
				//Decompress
				$data = @gzuncompress($data);
				if ($data===false) 
				{
					//Error
					$res = OZE_INVALID_FILE_FORMAT;
				}
				else 
				{
					//#################################################################################
					//Extract contacts from the data and print to screen
					//#################################################################################
					$cl= oz_dabi_extract_contacts($data);
					
					//Convert Desktop contacts to normal contacts
					$res = OZE_SUCCESS;
					
					$state->state = _OZ_STATE_SELECT_CONTACTS;
					$state->save_contacts($cl);
					$res = OZE_SUCCESS;
					$oz_view = 'contacts';
				}
			}
		}
	
	
		//Save state
		$state->view = $oz_view;
	
		//===================================================================================
		//Handle errors
		//===================================================================================
		//Captcha was raised?
		if ($res===OZE_CAPTCHA)
		{
			$imageurl = $state->inviter->get_captcha_image_url();
			//Service supports answering captcha challenges
			if (!empty($imageurl))
			{
				$_REQUEST['oz_captcha_image'] = $imageurl;
				$_REQUEST['oz_errmsg'] = oz_text('ERROR_CAPTCHA');
				$_REQUEST['oz_captcha_remaining_count'] = $state->inviter->get_remaining_count();
				$oz_view = 'captcha'; //_file = dirname(__FILE__).'/view_captcha.php';
			}
			//Service doesn't support answering of captcha challenge
			else
			{
				$_REQUEST['oz_errmsg'] = oz_text('ERROR_CAPTCHA_PRESENTED');
				
				//What view eh?
			}
			
			//If user cancels the captcha, where do we go?
			//If the captcha is successful, go where?
			
	//		$state->captcha_cancel_view = $view;
	//		$state->captcha_success_view = $view;
		}
		else if ($res==OZE_AUTHENTICATION_FAILED)
		{
			$_REQUEST['oz_errmsg'] = oz_text('ERROR_AUTH');
		}
		else if (is_int($res))
		{
			//Error. Show the error message
			if ($res!=OZE_SUCCESS)
			{
				//$_REQUEST['oz_errmsg'] = oz_get_error_message($res);
				$_REQUEST['oz_errmsg'] = oz_text('ERROR_'.$res);
			}
		}		
	
	}
	

?>
<script type="text/javascript" src="<?php echo htmlentities(oz_get_resource_path()) ?>domready.js"></script>
<script type="text/javascript">
var oz_requested_notify_resize = false;
//var oz_resize_timeout = null;
function ozNotifyResize() {
	if (!oz_requested_notify_resize) {
		oz_requested_notify_resize = true;
		DomReady.domReady.add(function() {
			oz_requested_notify_resize = false;
			if (typeof(ozOnResized)=="function") ozOnResized();		
		});
	}
	//if (oz_resize_timeout==null) {
	//	oz_resize_timeout=setTimeout('clearTimeout(oz_resize_timeout);oz_resize_timeout=null;if (typeof(ozOnResized)=="function") ozOnResized();',1);
	//}
}

var oz_requested_viewchange = false;
var oz_viewchange_timeout = null;
var oz_viewchange_view = null;
function ozNotifyViewChange(view) {
	oz_viewchange_view = view;
	
	if (!oz_requested_viewchange) {
		oz_requested_viewchange = true;
		DomReady.domReady.add(function() {
			oz_requested_viewchange = false;
			if (typeof(ozOnViewChanged)=="function") ozOnViewChanged(oz_viewchange_view);
		});
	}

	//if (oz_viewchange_timeout==null) {
	//	oz_viewchange_timeout=setTimeout('clearTimeout(oz_viewchange_timeout);oz_viewchange_timeout=null;if (typeof(ozOnViewChanged)=="function") ozOnViewChanged(oz_viewchange_view);',1);
	//}
}

function ozSetDisplayStyle(ids,style) {
	var ida = ids.split(',');
	for (var i=0; i<ida.length; i++)
	{
		var ele = document.getElementById(ida[i]);
		if (ele!=null && ele!=undefined) {
			ele.style.display = style;
			ozNotifyResize();
		}
	}
}

function ozHide(d) {ozSetDisplayStyle(d,'none');} //var ele = document.getElementById(d);if (ele!=null && ele!=undefined) ele.style.display = "none";}
function ozShow(d) {ozSetDisplayStyle(d,'block');} //var ele = document.getElementById(d);if (ele!=null && ele!=undefined) ele.style.display = "block";}

function ozPopUp(url,frame,width,height) {
	var left = (screen.width) ? (screen.width-width)/2 : 320;
	var top = (screen.height) ? (screen.height-height)/2 : 240;
	var win = open(url,frame,'toolbar=no,resizable=yes,scrollbars=yes,directories=no,menubar=no,status=yes,width='+width+',height='+height+',top='+top+',left='+left);
	win.focus();
	return win;
}

function ozOnSubmit()
{
	//Hide all and loader panel
	document.getElementById('ozpanel_all').style.display="none";
	document.getElementById('ozpanel_please_wait').style.display="block";
	ozNotifyResize();
	ozNotifyViewChange('submitting');
	return true;
}
function ozStartAgain2() {
	document.ozform_startagain.submit();
}
</script>
<div id="ozpanel_please_wait"><center><?php echo oz_text('PLEASEWAIT') ?></center></div>
<form name="ozform_startagain" method="post" style="display:none;">
<?php echo ozi_render_form_snippet(); ?>
</form>
<div id="ozpanel_all">
<?php
	//If error message is present, then display it
	if (isset($_REQUEST['oz_errmsg']))
	{
		$err = $_REQUEST['oz_errmsg'];
		echo '<div id="oz_error">'.htmlentities($err).'</div>';
	}
	
	//Save/Delete state
	if ($state->state===_OZ_STATE_FINISHED) 
	{
		oz_delete_state($_REQUEST['oz_state']);
		$state->reset();
	}	
	else oz_save_state($_REQUEST['oz_state'],$state);
	
	//Store some common items on request
	$_REQUEST['oz_contacts'] = $state->contacts;
	$_REQUEST['oz_inviter'] = $state->inviter;
	
//	echo '<div id="oz_inviter">';



	
	//Render the view	
	if (isset($_OZ_VIEWS[$oz_view])) {
		oz_eval_template($_OZ_VIEWS[$oz_view]);
		//include($_OZ_VIEWS[$oz_view]);
	}
	
	
//	if ($oz_view!='login')
//	{
//		echo '<div class="oz_footer"><a href="'.$_SERVER['REQUEST_URI'].'">Start again</a></div>';
//	}
	
//	echo '</div>';
//	echo '<div id="oz_footer">Powered by <a href="http://www.octazen.com" target="_blank">Octazen Solutions Invite Engine</a></div>';
	?>
</div>
    

<?php

	
//echo '<pre>';
//echo htmlentities(var_export($state,true));
//echo '</pre>';


	$html = "\r\n<!-- OCTAZEN INVITER COMPONENT BEGIN -->\r\n";
	$html .= ob_get_contents();
	$html .= '<script type="text/javascript">if (typeof(ozOnLoaded)=="function") ozOnLoaded();</script>';
	$html .= "\r\n<!-- OCTAZEN INVITER COMPONENT END -->\r\n";
	ob_end_clean();
	return $html;
}




function ozi_encode_header($input, $charset = 'UTF-8')
{
	$m=preg_match_all('/(\w*[\x80-\xFF]+\w*)/', $input, $matches);
	if($m)$input=mb_encode_mimeheader($input,$charset, 'Q');
	return $input;
}

//--------------------------------------------------
//Default mail sender
//--------------------------------------------------
function oz_inviter_sendmail ($from_name, $from_email, &$contacts, $subject, $text, $html)
{
	if (empty($from_name)) $from_name=ozi_get_config('from_name','');
	if (empty($from_email)) $from_name=ozi_get_config('from_email','');
				
	$sc = 0; //Mail count for smtp session
	$m = ozi_get_config('mails_per_smtp_session',10);
	$method = ozi_get_config('mailer','mail');
	$charset = ozi_get_config('mail_charset','utf-8');;
	$mailer = NULL;
	
	if ($method==='smtp' && !class_exists('PHPMailer')) {
		trigger_error('Cannot find PHPMailer class. Reverting to PHP\'s mail() function',E_USER_WARNING);
		$method='mail';
	}
	
	if (is_callable('mb_encode_mimeheader')) {
		if (!empty($from_name)) $from_name = ozi_encode_header($from_name,$charset);
		if (strpos($from_name,'=?')!==0) $from_name='"'.$from_name.'"';
		if (!empty($subject)) $subject = ozi_encode_header($subject,$charset);
	}
	
	foreach ($contacts as $c) {
		$to_name = isset($c['name']) ? $item['name'] : '';
		$to_email = $c['email'];
		//TODO: CHECK EMAIL VALID (it should be valid)

		///////////////////////////////////////////////////////////////////////			
		//Send using mail()
		///////////////////////////////////////////////////////////////////////			
		if ($method=='mail') {
			$headers = "MIME-Version: 1.0\r\n";
			

			if (empty($from_name)) $headers .= 'From: '.$from_email."\r\n";
			else $headers .= 'From: '.$from_name.' <'.$from_email.">\r\n";
			if (!empty($html)) {
				$headers .= "Content-Type: text/html;charset=$charset\r\n";
				$r = mail($to_email,$subject,$html,$headers);
			}
			else {
				$headers .= "Content-Type: text/plain;charset=$charset\r\n";
				$r = mail($to_email,$subject,$text,$headers);
			}	
		}

		///////////////////////////////////////////////////////////////////////			
		//Send using Octazen mailq
		///////////////////////////////////////////////////////////////////////			
		else if ($method=='mailq') {
			$mqconfig = array(
				'method' => $method,
				'smtp_host' => ozi_get_config('smtp_host','localhost'),
				'smtp_port' => ozi_get_config('smtp_host','25'),
				'smtp_auth' => ozi_get_config('smtp_auth',FALSE),
				'smtp_ssl' => ozi_get_config('smtp_ssl',FALSE),
				'smtp_user' => ozi_get_config('smtp_user',''),
				'smtp_pass' => ozi_get_config('smtp_pass',''),
				'mail_spool' => ozi_get_config('mailq_spool',dirname(__FILE__).'/spool/'),
				//Unused values
				'default_from' => '',
				'lock_timeout' => 60,
				'mails_per_smtp_session' => 10,
				'mails_per_batch' => 100,
				'lock_file' => 'lock.pid'
			);
			mq_queue_mail($config, $from_name, $from_email, $to_name, $to_email, $subject, $text, $html);
		}
		
		///////////////////////////////////////////////////////////////////////			
		//Send using phpmailer
		///////////////////////////////////////////////////////////////////////			
		else {
			//echo "PHPMAILER(): FROM $from_name &lt;$from_email&gt;, TO $to_name &lt;$to_email&gt;<br/>";
			//flush();
			
			//Create PhpMailer instance if not available
			if ($mailer==NULL) {
				$mailer=new PHPMailer();
				$mailer->Mailer = 'smtp';
				$mailer->IsSMTP();
				$mailer->Host = ozi_get_config('smtp_host','localhost');
				$mailer->Port = ozi_get_config('smtp_host','25');
				if (ozi_get_config('smtp_ssl',FALSE)) $mailer->SMTPSecure = "ssl";
				if (ozi_get_config('smtp_auth',FALSE)) {
					$mailer->SMTPAuth = TRUE;
					$mailer->Username = ozi_get_config('smtp_user','');
					$mailer->Password = ozi_get_config('smtp_pass','');
				}
			}

			//Set from, to, subejct, etc
			$mailer->CharSet = $charset;
			$mailer->From     = $from_email;
			$mailer->FromName = $from_name;
			$mailer->ClearAddresses();
			$mailer->AddAddress($to_email, $to_name);
			$mailer->Subject = $subject;
			if (!empty($html)) {
				$mailer->IsHTML(TRUE);
				$mailer->Body = $html;
				if (!empty($text)) $mailer->AltBody = $text;
			}
			else {
				$mailer->IsHTML(FALSE);
				$mailer->Body = $html;
			}
			
			//TODO: What if error sending mail?
			$r = $mailer->Send();
			$sc++;
			if (!$r || $sc>=$m) {
				$sc=0;
				$mailer->SmtpClose();
				$mailer = NULL;
			}
		}

	}
	
	//Close Phpmailer if used
	if ($mailer!==NULL) $mailer->SmtpClose();
}

?>